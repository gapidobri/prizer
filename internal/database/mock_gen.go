// Code generated by mocktail; DO NOT EDIT.

package database

import (
	"context"
	"testing"
	"time"

	"github.com/gapidobri/prizer/internal/pkg/models/database"
	"github.com/stretchr/testify/mock"
)

// drawMethodRepositoryMock mock of DrawMethodRepository.
type drawMethodRepositoryMock struct{ mock.Mock }

// NewDrawMethodRepositoryMock creates a new drawMethodRepositoryMock.
func NewDrawMethodRepositoryMock(tb testing.TB) *drawMethodRepositoryMock {
	tb.Helper()

	m := &drawMethodRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *drawMethodRepositoryMock) GetDrawMethods(_ context.Context, gameId string, filter database.GetDrawMethodsFilter) ([]database.DrawMethod, error) {
	_ret := _m.Called(gameId, filter)

	if _rf, ok := _ret.Get(0).(func(string, database.GetDrawMethodsFilter) ([]database.DrawMethod, error)); ok {
		return _rf(gameId, filter)
	}

	_ra0, _ := _ret.Get(0).([]database.DrawMethod)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *drawMethodRepositoryMock) OnGetDrawMethods(gameId string, filter database.GetDrawMethodsFilter) *drawMethodRepositoryGetDrawMethodsCall {
	return &drawMethodRepositoryGetDrawMethodsCall{Call: _m.Mock.On("GetDrawMethods", gameId, filter), Parent: _m}
}

func (_m *drawMethodRepositoryMock) OnGetDrawMethodsRaw(gameId interface{}, filter interface{}) *drawMethodRepositoryGetDrawMethodsCall {
	return &drawMethodRepositoryGetDrawMethodsCall{Call: _m.Mock.On("GetDrawMethods", gameId, filter), Parent: _m}
}

type drawMethodRepositoryGetDrawMethodsCall struct {
	*mock.Call
	Parent *drawMethodRepositoryMock
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) Panic(msg string) *drawMethodRepositoryGetDrawMethodsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) Once() *drawMethodRepositoryGetDrawMethodsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) Twice() *drawMethodRepositoryGetDrawMethodsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) Times(i int) *drawMethodRepositoryGetDrawMethodsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) WaitUntil(w <-chan time.Time) *drawMethodRepositoryGetDrawMethodsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) After(d time.Duration) *drawMethodRepositoryGetDrawMethodsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) Run(fn func(args mock.Arguments)) *drawMethodRepositoryGetDrawMethodsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) Maybe() *drawMethodRepositoryGetDrawMethodsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) TypedReturns(a []database.DrawMethod, b error) *drawMethodRepositoryGetDrawMethodsCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) ReturnsFn(fn func(string, database.GetDrawMethodsFilter) ([]database.DrawMethod, error)) *drawMethodRepositoryGetDrawMethodsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) TypedRun(fn func(string, database.GetDrawMethodsFilter)) *drawMethodRepositoryGetDrawMethodsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_gameId := args.String(0)
		_filter, _ := args.Get(1).(database.GetDrawMethodsFilter)
		fn(_gameId, _filter)
	})
	return _c
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) OnGetDrawMethods(gameId string, filter database.GetDrawMethodsFilter) *drawMethodRepositoryGetDrawMethodsCall {
	return _c.Parent.OnGetDrawMethods(gameId, filter)
}

func (_c *drawMethodRepositoryGetDrawMethodsCall) OnGetDrawMethodsRaw(gameId interface{}, filter interface{}) *drawMethodRepositoryGetDrawMethodsCall {
	return _c.Parent.OnGetDrawMethodsRaw(gameId, filter)
}

// gameRepositoryMock mock of GameRepository.
type gameRepositoryMock struct{ mock.Mock }

// NewGameRepositoryMock creates a new gameRepositoryMock.
func NewGameRepositoryMock(tb testing.TB) *gameRepositoryMock {
	tb.Helper()

	m := &gameRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *gameRepositoryMock) GetGame(_ context.Context, gameId string) (*database.Game, error) {
	_ret := _m.Called(gameId)

	if _rf, ok := _ret.Get(0).(func(string) (*database.Game, error)); ok {
		return _rf(gameId)
	}

	_ra0, _ := _ret.Get(0).(*database.Game)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *gameRepositoryMock) OnGetGame(gameId string) *gameRepositoryGetGameCall {
	return &gameRepositoryGetGameCall{Call: _m.Mock.On("GetGame", gameId), Parent: _m}
}

func (_m *gameRepositoryMock) OnGetGameRaw(gameId interface{}) *gameRepositoryGetGameCall {
	return &gameRepositoryGetGameCall{Call: _m.Mock.On("GetGame", gameId), Parent: _m}
}

type gameRepositoryGetGameCall struct {
	*mock.Call
	Parent *gameRepositoryMock
}

func (_c *gameRepositoryGetGameCall) Panic(msg string) *gameRepositoryGetGameCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *gameRepositoryGetGameCall) Once() *gameRepositoryGetGameCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *gameRepositoryGetGameCall) Twice() *gameRepositoryGetGameCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *gameRepositoryGetGameCall) Times(i int) *gameRepositoryGetGameCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *gameRepositoryGetGameCall) WaitUntil(w <-chan time.Time) *gameRepositoryGetGameCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *gameRepositoryGetGameCall) After(d time.Duration) *gameRepositoryGetGameCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *gameRepositoryGetGameCall) Run(fn func(args mock.Arguments)) *gameRepositoryGetGameCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *gameRepositoryGetGameCall) Maybe() *gameRepositoryGetGameCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *gameRepositoryGetGameCall) TypedReturns(a *database.Game, b error) *gameRepositoryGetGameCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *gameRepositoryGetGameCall) ReturnsFn(fn func(string) (*database.Game, error)) *gameRepositoryGetGameCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *gameRepositoryGetGameCall) TypedRun(fn func(string)) *gameRepositoryGetGameCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_gameId := args.String(0)
		fn(_gameId)
	})
	return _c
}

func (_c *gameRepositoryGetGameCall) OnGetGame(gameId string) *gameRepositoryGetGameCall {
	return _c.Parent.OnGetGame(gameId)
}

func (_c *gameRepositoryGetGameCall) OnGetGames() *gameRepositoryGetGamesCall {
	return _c.Parent.OnGetGames()
}

func (_c *gameRepositoryGetGameCall) OnGetGameRaw(gameId interface{}) *gameRepositoryGetGameCall {
	return _c.Parent.OnGetGameRaw(gameId)
}

func (_c *gameRepositoryGetGameCall) OnGetGamesRaw() *gameRepositoryGetGamesCall {
	return _c.Parent.OnGetGamesRaw()
}

func (_m *gameRepositoryMock) GetGames(_ context.Context) ([]database.Game, error) {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() ([]database.Game, error)); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).([]database.Game)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *gameRepositoryMock) OnGetGames() *gameRepositoryGetGamesCall {
	return &gameRepositoryGetGamesCall{Call: _m.Mock.On("GetGames"), Parent: _m}
}

func (_m *gameRepositoryMock) OnGetGamesRaw() *gameRepositoryGetGamesCall {
	return &gameRepositoryGetGamesCall{Call: _m.Mock.On("GetGames"), Parent: _m}
}

type gameRepositoryGetGamesCall struct {
	*mock.Call
	Parent *gameRepositoryMock
}

func (_c *gameRepositoryGetGamesCall) Panic(msg string) *gameRepositoryGetGamesCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *gameRepositoryGetGamesCall) Once() *gameRepositoryGetGamesCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *gameRepositoryGetGamesCall) Twice() *gameRepositoryGetGamesCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *gameRepositoryGetGamesCall) Times(i int) *gameRepositoryGetGamesCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *gameRepositoryGetGamesCall) WaitUntil(w <-chan time.Time) *gameRepositoryGetGamesCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *gameRepositoryGetGamesCall) After(d time.Duration) *gameRepositoryGetGamesCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *gameRepositoryGetGamesCall) Run(fn func(args mock.Arguments)) *gameRepositoryGetGamesCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *gameRepositoryGetGamesCall) Maybe() *gameRepositoryGetGamesCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *gameRepositoryGetGamesCall) TypedReturns(a []database.Game, b error) *gameRepositoryGetGamesCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *gameRepositoryGetGamesCall) ReturnsFn(fn func() ([]database.Game, error)) *gameRepositoryGetGamesCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *gameRepositoryGetGamesCall) TypedRun(fn func()) *gameRepositoryGetGamesCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *gameRepositoryGetGamesCall) OnGetGame(gameId string) *gameRepositoryGetGameCall {
	return _c.Parent.OnGetGame(gameId)
}

func (_c *gameRepositoryGetGamesCall) OnGetGames() *gameRepositoryGetGamesCall {
	return _c.Parent.OnGetGames()
}

func (_c *gameRepositoryGetGamesCall) OnGetGameRaw(gameId interface{}) *gameRepositoryGetGameCall {
	return _c.Parent.OnGetGameRaw(gameId)
}

func (_c *gameRepositoryGetGamesCall) OnGetGamesRaw() *gameRepositoryGetGamesCall {
	return _c.Parent.OnGetGamesRaw()
}

// mailTemplateRepositoryMock mock of MailTemplateRepository.
type mailTemplateRepositoryMock struct{ mock.Mock }

// NewMailTemplateRepositoryMock creates a new mailTemplateRepositoryMock.
func NewMailTemplateRepositoryMock(tb testing.TB) *mailTemplateRepositoryMock {
	tb.Helper()

	m := &mailTemplateRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *mailTemplateRepositoryMock) GetMailTemplate(_ context.Context, mailTemplateId string) (*database.MailTemplate, error) {
	_ret := _m.Called(mailTemplateId)

	if _rf, ok := _ret.Get(0).(func(string) (*database.MailTemplate, error)); ok {
		return _rf(mailTemplateId)
	}

	_ra0, _ := _ret.Get(0).(*database.MailTemplate)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *mailTemplateRepositoryMock) OnGetMailTemplate(mailTemplateId string) *mailTemplateRepositoryGetMailTemplateCall {
	return &mailTemplateRepositoryGetMailTemplateCall{Call: _m.Mock.On("GetMailTemplate", mailTemplateId), Parent: _m}
}

func (_m *mailTemplateRepositoryMock) OnGetMailTemplateRaw(mailTemplateId interface{}) *mailTemplateRepositoryGetMailTemplateCall {
	return &mailTemplateRepositoryGetMailTemplateCall{Call: _m.Mock.On("GetMailTemplate", mailTemplateId), Parent: _m}
}

type mailTemplateRepositoryGetMailTemplateCall struct {
	*mock.Call
	Parent *mailTemplateRepositoryMock
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) Panic(msg string) *mailTemplateRepositoryGetMailTemplateCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) Once() *mailTemplateRepositoryGetMailTemplateCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) Twice() *mailTemplateRepositoryGetMailTemplateCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) Times(i int) *mailTemplateRepositoryGetMailTemplateCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) WaitUntil(w <-chan time.Time) *mailTemplateRepositoryGetMailTemplateCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) After(d time.Duration) *mailTemplateRepositoryGetMailTemplateCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) Run(fn func(args mock.Arguments)) *mailTemplateRepositoryGetMailTemplateCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) Maybe() *mailTemplateRepositoryGetMailTemplateCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) TypedReturns(a *database.MailTemplate, b error) *mailTemplateRepositoryGetMailTemplateCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) ReturnsFn(fn func(string) (*database.MailTemplate, error)) *mailTemplateRepositoryGetMailTemplateCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) TypedRun(fn func(string)) *mailTemplateRepositoryGetMailTemplateCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_mailTemplateId := args.String(0)
		fn(_mailTemplateId)
	})
	return _c
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) OnGetMailTemplate(mailTemplateId string) *mailTemplateRepositoryGetMailTemplateCall {
	return _c.Parent.OnGetMailTemplate(mailTemplateId)
}

func (_c *mailTemplateRepositoryGetMailTemplateCall) OnGetMailTemplateRaw(mailTemplateId interface{}) *mailTemplateRepositoryGetMailTemplateCall {
	return _c.Parent.OnGetMailTemplateRaw(mailTemplateId)
}

// participationRepositoryMock mock of ParticipationRepository.
type participationRepositoryMock struct{ mock.Mock }

// NewParticipationRepositoryMock creates a new participationRepositoryMock.
func NewParticipationRepositoryMock(tb testing.TB) *participationRepositoryMock {
	tb.Helper()

	m := &participationRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *participationRepositoryMock) CreateParticipation(_ context.Context, createParticipation database.CreateParticipation) (*database.Participation, error) {
	_ret := _m.Called(createParticipation)

	if _rf, ok := _ret.Get(0).(func(database.CreateParticipation) (*database.Participation, error)); ok {
		return _rf(createParticipation)
	}

	_ra0, _ := _ret.Get(0).(*database.Participation)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *participationRepositoryMock) OnCreateParticipation(createParticipation database.CreateParticipation) *participationRepositoryCreateParticipationCall {
	return &participationRepositoryCreateParticipationCall{Call: _m.Mock.On("CreateParticipation", createParticipation), Parent: _m}
}

func (_m *participationRepositoryMock) OnCreateParticipationRaw(createParticipation interface{}) *participationRepositoryCreateParticipationCall {
	return &participationRepositoryCreateParticipationCall{Call: _m.Mock.On("CreateParticipation", createParticipation), Parent: _m}
}

type participationRepositoryCreateParticipationCall struct {
	*mock.Call
	Parent *participationRepositoryMock
}

func (_c *participationRepositoryCreateParticipationCall) Panic(msg string) *participationRepositoryCreateParticipationCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *participationRepositoryCreateParticipationCall) Once() *participationRepositoryCreateParticipationCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *participationRepositoryCreateParticipationCall) Twice() *participationRepositoryCreateParticipationCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *participationRepositoryCreateParticipationCall) Times(i int) *participationRepositoryCreateParticipationCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *participationRepositoryCreateParticipationCall) WaitUntil(w <-chan time.Time) *participationRepositoryCreateParticipationCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *participationRepositoryCreateParticipationCall) After(d time.Duration) *participationRepositoryCreateParticipationCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *participationRepositoryCreateParticipationCall) Run(fn func(args mock.Arguments)) *participationRepositoryCreateParticipationCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *participationRepositoryCreateParticipationCall) Maybe() *participationRepositoryCreateParticipationCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *participationRepositoryCreateParticipationCall) TypedReturns(a *database.Participation, b error) *participationRepositoryCreateParticipationCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *participationRepositoryCreateParticipationCall) ReturnsFn(fn func(database.CreateParticipation) (*database.Participation, error)) *participationRepositoryCreateParticipationCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *participationRepositoryCreateParticipationCall) TypedRun(fn func(database.CreateParticipation)) *participationRepositoryCreateParticipationCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_createParticipation, _ := args.Get(0).(database.CreateParticipation)
		fn(_createParticipation)
	})
	return _c
}

func (_c *participationRepositoryCreateParticipationCall) OnCreateParticipation(createParticipation database.CreateParticipation) *participationRepositoryCreateParticipationCall {
	return _c.Parent.OnCreateParticipation(createParticipation)
}

func (_c *participationRepositoryCreateParticipationCall) OnGetParticipations(filter database.GetParticipationsFilter) *participationRepositoryGetParticipationsCall {
	return _c.Parent.OnGetParticipations(filter)
}

func (_c *participationRepositoryCreateParticipationCall) OnCreateParticipationRaw(createParticipation interface{}) *participationRepositoryCreateParticipationCall {
	return _c.Parent.OnCreateParticipationRaw(createParticipation)
}

func (_c *participationRepositoryCreateParticipationCall) OnGetParticipationsRaw(filter interface{}) *participationRepositoryGetParticipationsCall {
	return _c.Parent.OnGetParticipationsRaw(filter)
}

func (_m *participationRepositoryMock) GetParticipations(_ context.Context, filter database.GetParticipationsFilter) ([]database.Participation, error) {
	_ret := _m.Called(filter)

	if _rf, ok := _ret.Get(0).(func(database.GetParticipationsFilter) ([]database.Participation, error)); ok {
		return _rf(filter)
	}

	_ra0, _ := _ret.Get(0).([]database.Participation)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *participationRepositoryMock) OnGetParticipations(filter database.GetParticipationsFilter) *participationRepositoryGetParticipationsCall {
	return &participationRepositoryGetParticipationsCall{Call: _m.Mock.On("GetParticipations", filter), Parent: _m}
}

func (_m *participationRepositoryMock) OnGetParticipationsRaw(filter interface{}) *participationRepositoryGetParticipationsCall {
	return &participationRepositoryGetParticipationsCall{Call: _m.Mock.On("GetParticipations", filter), Parent: _m}
}

type participationRepositoryGetParticipationsCall struct {
	*mock.Call
	Parent *participationRepositoryMock
}

func (_c *participationRepositoryGetParticipationsCall) Panic(msg string) *participationRepositoryGetParticipationsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *participationRepositoryGetParticipationsCall) Once() *participationRepositoryGetParticipationsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *participationRepositoryGetParticipationsCall) Twice() *participationRepositoryGetParticipationsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *participationRepositoryGetParticipationsCall) Times(i int) *participationRepositoryGetParticipationsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *participationRepositoryGetParticipationsCall) WaitUntil(w <-chan time.Time) *participationRepositoryGetParticipationsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *participationRepositoryGetParticipationsCall) After(d time.Duration) *participationRepositoryGetParticipationsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *participationRepositoryGetParticipationsCall) Run(fn func(args mock.Arguments)) *participationRepositoryGetParticipationsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *participationRepositoryGetParticipationsCall) Maybe() *participationRepositoryGetParticipationsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *participationRepositoryGetParticipationsCall) TypedReturns(a []database.Participation, b error) *participationRepositoryGetParticipationsCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *participationRepositoryGetParticipationsCall) ReturnsFn(fn func(database.GetParticipationsFilter) ([]database.Participation, error)) *participationRepositoryGetParticipationsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *participationRepositoryGetParticipationsCall) TypedRun(fn func(database.GetParticipationsFilter)) *participationRepositoryGetParticipationsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_filter, _ := args.Get(0).(database.GetParticipationsFilter)
		fn(_filter)
	})
	return _c
}

func (_c *participationRepositoryGetParticipationsCall) OnCreateParticipation(createParticipation database.CreateParticipation) *participationRepositoryCreateParticipationCall {
	return _c.Parent.OnCreateParticipation(createParticipation)
}

func (_c *participationRepositoryGetParticipationsCall) OnGetParticipations(filter database.GetParticipationsFilter) *participationRepositoryGetParticipationsCall {
	return _c.Parent.OnGetParticipations(filter)
}

func (_c *participationRepositoryGetParticipationsCall) OnCreateParticipationRaw(createParticipation interface{}) *participationRepositoryCreateParticipationCall {
	return _c.Parent.OnCreateParticipationRaw(createParticipation)
}

func (_c *participationRepositoryGetParticipationsCall) OnGetParticipationsRaw(filter interface{}) *participationRepositoryGetParticipationsCall {
	return _c.Parent.OnGetParticipationsRaw(filter)
}

// participationMethodRepositoryMock mock of ParticipationMethodRepository.
type participationMethodRepositoryMock struct{ mock.Mock }

// NewParticipationMethodRepositoryMock creates a new participationMethodRepositoryMock.
func NewParticipationMethodRepositoryMock(tb testing.TB) *participationMethodRepositoryMock {
	tb.Helper()

	m := &participationMethodRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *participationMethodRepositoryMock) GetParticipationMethod(_ context.Context, participationMethodId string) (*database.ParticipationMethod, error) {
	_ret := _m.Called(participationMethodId)

	if _rf, ok := _ret.Get(0).(func(string) (*database.ParticipationMethod, error)); ok {
		return _rf(participationMethodId)
	}

	_ra0, _ := _ret.Get(0).(*database.ParticipationMethod)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *participationMethodRepositoryMock) OnGetParticipationMethod(participationMethodId string) *participationMethodRepositoryGetParticipationMethodCall {
	return &participationMethodRepositoryGetParticipationMethodCall{Call: _m.Mock.On("GetParticipationMethod", participationMethodId), Parent: _m}
}

func (_m *participationMethodRepositoryMock) OnGetParticipationMethodRaw(participationMethodId interface{}) *participationMethodRepositoryGetParticipationMethodCall {
	return &participationMethodRepositoryGetParticipationMethodCall{Call: _m.Mock.On("GetParticipationMethod", participationMethodId), Parent: _m}
}

type participationMethodRepositoryGetParticipationMethodCall struct {
	*mock.Call
	Parent *participationMethodRepositoryMock
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) Panic(msg string) *participationMethodRepositoryGetParticipationMethodCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) Once() *participationMethodRepositoryGetParticipationMethodCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) Twice() *participationMethodRepositoryGetParticipationMethodCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) Times(i int) *participationMethodRepositoryGetParticipationMethodCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) WaitUntil(w <-chan time.Time) *participationMethodRepositoryGetParticipationMethodCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) After(d time.Duration) *participationMethodRepositoryGetParticipationMethodCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) Run(fn func(args mock.Arguments)) *participationMethodRepositoryGetParticipationMethodCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) Maybe() *participationMethodRepositoryGetParticipationMethodCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) TypedReturns(a *database.ParticipationMethod, b error) *participationMethodRepositoryGetParticipationMethodCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) ReturnsFn(fn func(string) (*database.ParticipationMethod, error)) *participationMethodRepositoryGetParticipationMethodCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) TypedRun(fn func(string)) *participationMethodRepositoryGetParticipationMethodCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_participationMethodId := args.String(0)
		fn(_participationMethodId)
	})
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) OnGetParticipationMethod(participationMethodId string) *participationMethodRepositoryGetParticipationMethodCall {
	return _c.Parent.OnGetParticipationMethod(participationMethodId)
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) OnGetParticipationMethods(filter database.GetParticipationMethodsFilter) *participationMethodRepositoryGetParticipationMethodsCall {
	return _c.Parent.OnGetParticipationMethods(filter)
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) OnGetParticipationMethodRaw(participationMethodId interface{}) *participationMethodRepositoryGetParticipationMethodCall {
	return _c.Parent.OnGetParticipationMethodRaw(participationMethodId)
}

func (_c *participationMethodRepositoryGetParticipationMethodCall) OnGetParticipationMethodsRaw(filter interface{}) *participationMethodRepositoryGetParticipationMethodsCall {
	return _c.Parent.OnGetParticipationMethodsRaw(filter)
}

func (_m *participationMethodRepositoryMock) GetParticipationMethods(_ context.Context, filter database.GetParticipationMethodsFilter) ([]database.ParticipationMethod, error) {
	_ret := _m.Called(filter)

	if _rf, ok := _ret.Get(0).(func(database.GetParticipationMethodsFilter) ([]database.ParticipationMethod, error)); ok {
		return _rf(filter)
	}

	_ra0, _ := _ret.Get(0).([]database.ParticipationMethod)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *participationMethodRepositoryMock) OnGetParticipationMethods(filter database.GetParticipationMethodsFilter) *participationMethodRepositoryGetParticipationMethodsCall {
	return &participationMethodRepositoryGetParticipationMethodsCall{Call: _m.Mock.On("GetParticipationMethods", filter), Parent: _m}
}

func (_m *participationMethodRepositoryMock) OnGetParticipationMethodsRaw(filter interface{}) *participationMethodRepositoryGetParticipationMethodsCall {
	return &participationMethodRepositoryGetParticipationMethodsCall{Call: _m.Mock.On("GetParticipationMethods", filter), Parent: _m}
}

type participationMethodRepositoryGetParticipationMethodsCall struct {
	*mock.Call
	Parent *participationMethodRepositoryMock
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) Panic(msg string) *participationMethodRepositoryGetParticipationMethodsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) Once() *participationMethodRepositoryGetParticipationMethodsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) Twice() *participationMethodRepositoryGetParticipationMethodsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) Times(i int) *participationMethodRepositoryGetParticipationMethodsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) WaitUntil(w <-chan time.Time) *participationMethodRepositoryGetParticipationMethodsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) After(d time.Duration) *participationMethodRepositoryGetParticipationMethodsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) Run(fn func(args mock.Arguments)) *participationMethodRepositoryGetParticipationMethodsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) Maybe() *participationMethodRepositoryGetParticipationMethodsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) TypedReturns(a []database.ParticipationMethod, b error) *participationMethodRepositoryGetParticipationMethodsCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) ReturnsFn(fn func(database.GetParticipationMethodsFilter) ([]database.ParticipationMethod, error)) *participationMethodRepositoryGetParticipationMethodsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) TypedRun(fn func(database.GetParticipationMethodsFilter)) *participationMethodRepositoryGetParticipationMethodsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_filter, _ := args.Get(0).(database.GetParticipationMethodsFilter)
		fn(_filter)
	})
	return _c
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) OnGetParticipationMethod(participationMethodId string) *participationMethodRepositoryGetParticipationMethodCall {
	return _c.Parent.OnGetParticipationMethod(participationMethodId)
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) OnGetParticipationMethods(filter database.GetParticipationMethodsFilter) *participationMethodRepositoryGetParticipationMethodsCall {
	return _c.Parent.OnGetParticipationMethods(filter)
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) OnGetParticipationMethodRaw(participationMethodId interface{}) *participationMethodRepositoryGetParticipationMethodCall {
	return _c.Parent.OnGetParticipationMethodRaw(participationMethodId)
}

func (_c *participationMethodRepositoryGetParticipationMethodsCall) OnGetParticipationMethodsRaw(filter interface{}) *participationMethodRepositoryGetParticipationMethodsCall {
	return _c.Parent.OnGetParticipationMethodsRaw(filter)
}

// prizeRepositoryMock mock of PrizeRepository.
type prizeRepositoryMock struct{ mock.Mock }

// NewPrizeRepositoryMock creates a new prizeRepositoryMock.
func NewPrizeRepositoryMock(tb testing.TB) *prizeRepositoryMock {
	tb.Helper()

	m := &prizeRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *prizeRepositoryMock) GetPrizes(_ context.Context, filter database.GetPrizesFilter) ([]database.Prize, error) {
	_ret := _m.Called(filter)

	if _rf, ok := _ret.Get(0).(func(database.GetPrizesFilter) ([]database.Prize, error)); ok {
		return _rf(filter)
	}

	_ra0, _ := _ret.Get(0).([]database.Prize)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *prizeRepositoryMock) OnGetPrizes(filter database.GetPrizesFilter) *prizeRepositoryGetPrizesCall {
	return &prizeRepositoryGetPrizesCall{Call: _m.Mock.On("GetPrizes", filter), Parent: _m}
}

func (_m *prizeRepositoryMock) OnGetPrizesRaw(filter interface{}) *prizeRepositoryGetPrizesCall {
	return &prizeRepositoryGetPrizesCall{Call: _m.Mock.On("GetPrizes", filter), Parent: _m}
}

type prizeRepositoryGetPrizesCall struct {
	*mock.Call
	Parent *prizeRepositoryMock
}

func (_c *prizeRepositoryGetPrizesCall) Panic(msg string) *prizeRepositoryGetPrizesCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *prizeRepositoryGetPrizesCall) Once() *prizeRepositoryGetPrizesCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *prizeRepositoryGetPrizesCall) Twice() *prizeRepositoryGetPrizesCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *prizeRepositoryGetPrizesCall) Times(i int) *prizeRepositoryGetPrizesCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *prizeRepositoryGetPrizesCall) WaitUntil(w <-chan time.Time) *prizeRepositoryGetPrizesCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *prizeRepositoryGetPrizesCall) After(d time.Duration) *prizeRepositoryGetPrizesCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *prizeRepositoryGetPrizesCall) Run(fn func(args mock.Arguments)) *prizeRepositoryGetPrizesCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *prizeRepositoryGetPrizesCall) Maybe() *prizeRepositoryGetPrizesCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *prizeRepositoryGetPrizesCall) TypedReturns(a []database.Prize, b error) *prizeRepositoryGetPrizesCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *prizeRepositoryGetPrizesCall) ReturnsFn(fn func(database.GetPrizesFilter) ([]database.Prize, error)) *prizeRepositoryGetPrizesCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *prizeRepositoryGetPrizesCall) TypedRun(fn func(database.GetPrizesFilter)) *prizeRepositoryGetPrizesCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_filter, _ := args.Get(0).(database.GetPrizesFilter)
		fn(_filter)
	})
	return _c
}

func (_c *prizeRepositoryGetPrizesCall) OnGetPrizes(filter database.GetPrizesFilter) *prizeRepositoryGetPrizesCall {
	return _c.Parent.OnGetPrizes(filter)
}

func (_c *prizeRepositoryGetPrizesCall) OnGetPrizesRaw(filter interface{}) *prizeRepositoryGetPrizesCall {
	return _c.Parent.OnGetPrizesRaw(filter)
}

// userRepositoryMock mock of UserRepository.
type userRepositoryMock struct{ mock.Mock }

// NewUserRepositoryMock creates a new userRepositoryMock.
func NewUserRepositoryMock(tb testing.TB) *userRepositoryMock {
	tb.Helper()

	m := &userRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *userRepositoryMock) CreateUser(_ context.Context, user database.CreateUser) (*database.User, error) {
	_ret := _m.Called(user)

	if _rf, ok := _ret.Get(0).(func(database.CreateUser) (*database.User, error)); ok {
		return _rf(user)
	}

	_ra0, _ := _ret.Get(0).(*database.User)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *userRepositoryMock) OnCreateUser(user database.CreateUser) *userRepositoryCreateUserCall {
	return &userRepositoryCreateUserCall{Call: _m.Mock.On("CreateUser", user), Parent: _m}
}

func (_m *userRepositoryMock) OnCreateUserRaw(user interface{}) *userRepositoryCreateUserCall {
	return &userRepositoryCreateUserCall{Call: _m.Mock.On("CreateUser", user), Parent: _m}
}

type userRepositoryCreateUserCall struct {
	*mock.Call
	Parent *userRepositoryMock
}

func (_c *userRepositoryCreateUserCall) Panic(msg string) *userRepositoryCreateUserCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *userRepositoryCreateUserCall) Once() *userRepositoryCreateUserCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *userRepositoryCreateUserCall) Twice() *userRepositoryCreateUserCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *userRepositoryCreateUserCall) Times(i int) *userRepositoryCreateUserCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *userRepositoryCreateUserCall) WaitUntil(w <-chan time.Time) *userRepositoryCreateUserCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *userRepositoryCreateUserCall) After(d time.Duration) *userRepositoryCreateUserCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *userRepositoryCreateUserCall) Run(fn func(args mock.Arguments)) *userRepositoryCreateUserCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *userRepositoryCreateUserCall) Maybe() *userRepositoryCreateUserCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *userRepositoryCreateUserCall) TypedReturns(a *database.User, b error) *userRepositoryCreateUserCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *userRepositoryCreateUserCall) ReturnsFn(fn func(database.CreateUser) (*database.User, error)) *userRepositoryCreateUserCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *userRepositoryCreateUserCall) TypedRun(fn func(database.CreateUser)) *userRepositoryCreateUserCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_user, _ := args.Get(0).(database.CreateUser)
		fn(_user)
	})
	return _c
}

func (_c *userRepositoryCreateUserCall) OnCreateUser(user database.CreateUser) *userRepositoryCreateUserCall {
	return _c.Parent.OnCreateUser(user)
}

func (_c *userRepositoryCreateUserCall) OnGetUser(userId string) *userRepositoryGetUserCall {
	return _c.Parent.OnGetUser(userId)
}

func (_c *userRepositoryCreateUserCall) OnGetUserFromFields(gameId string, fields database.UserFields) *userRepositoryGetUserFromFieldsCall {
	return _c.Parent.OnGetUserFromFields(gameId, fields)
}

func (_c *userRepositoryCreateUserCall) OnGetUsers(filter database.GetUsersFilter) *userRepositoryGetUsersCall {
	return _c.Parent.OnGetUsers(filter)
}

func (_c *userRepositoryCreateUserCall) OnCreateUserRaw(user interface{}) *userRepositoryCreateUserCall {
	return _c.Parent.OnCreateUserRaw(user)
}

func (_c *userRepositoryCreateUserCall) OnGetUserRaw(userId interface{}) *userRepositoryGetUserCall {
	return _c.Parent.OnGetUserRaw(userId)
}

func (_c *userRepositoryCreateUserCall) OnGetUserFromFieldsRaw(gameId interface{}, fields interface{}) *userRepositoryGetUserFromFieldsCall {
	return _c.Parent.OnGetUserFromFieldsRaw(gameId, fields)
}

func (_c *userRepositoryCreateUserCall) OnGetUsersRaw(filter interface{}) *userRepositoryGetUsersCall {
	return _c.Parent.OnGetUsersRaw(filter)
}

func (_m *userRepositoryMock) GetUser(_ context.Context, userId string) (*database.User, error) {
	_ret := _m.Called(userId)

	if _rf, ok := _ret.Get(0).(func(string) (*database.User, error)); ok {
		return _rf(userId)
	}

	_ra0, _ := _ret.Get(0).(*database.User)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *userRepositoryMock) OnGetUser(userId string) *userRepositoryGetUserCall {
	return &userRepositoryGetUserCall{Call: _m.Mock.On("GetUser", userId), Parent: _m}
}

func (_m *userRepositoryMock) OnGetUserRaw(userId interface{}) *userRepositoryGetUserCall {
	return &userRepositoryGetUserCall{Call: _m.Mock.On("GetUser", userId), Parent: _m}
}

type userRepositoryGetUserCall struct {
	*mock.Call
	Parent *userRepositoryMock
}

func (_c *userRepositoryGetUserCall) Panic(msg string) *userRepositoryGetUserCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *userRepositoryGetUserCall) Once() *userRepositoryGetUserCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *userRepositoryGetUserCall) Twice() *userRepositoryGetUserCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *userRepositoryGetUserCall) Times(i int) *userRepositoryGetUserCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *userRepositoryGetUserCall) WaitUntil(w <-chan time.Time) *userRepositoryGetUserCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *userRepositoryGetUserCall) After(d time.Duration) *userRepositoryGetUserCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *userRepositoryGetUserCall) Run(fn func(args mock.Arguments)) *userRepositoryGetUserCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *userRepositoryGetUserCall) Maybe() *userRepositoryGetUserCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *userRepositoryGetUserCall) TypedReturns(a *database.User, b error) *userRepositoryGetUserCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *userRepositoryGetUserCall) ReturnsFn(fn func(string) (*database.User, error)) *userRepositoryGetUserCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *userRepositoryGetUserCall) TypedRun(fn func(string)) *userRepositoryGetUserCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_userId := args.String(0)
		fn(_userId)
	})
	return _c
}

func (_c *userRepositoryGetUserCall) OnCreateUser(user database.CreateUser) *userRepositoryCreateUserCall {
	return _c.Parent.OnCreateUser(user)
}

func (_c *userRepositoryGetUserCall) OnGetUser(userId string) *userRepositoryGetUserCall {
	return _c.Parent.OnGetUser(userId)
}

func (_c *userRepositoryGetUserCall) OnGetUserFromFields(gameId string, fields database.UserFields) *userRepositoryGetUserFromFieldsCall {
	return _c.Parent.OnGetUserFromFields(gameId, fields)
}

func (_c *userRepositoryGetUserCall) OnGetUsers(filter database.GetUsersFilter) *userRepositoryGetUsersCall {
	return _c.Parent.OnGetUsers(filter)
}

func (_c *userRepositoryGetUserCall) OnCreateUserRaw(user interface{}) *userRepositoryCreateUserCall {
	return _c.Parent.OnCreateUserRaw(user)
}

func (_c *userRepositoryGetUserCall) OnGetUserRaw(userId interface{}) *userRepositoryGetUserCall {
	return _c.Parent.OnGetUserRaw(userId)
}

func (_c *userRepositoryGetUserCall) OnGetUserFromFieldsRaw(gameId interface{}, fields interface{}) *userRepositoryGetUserFromFieldsCall {
	return _c.Parent.OnGetUserFromFieldsRaw(gameId, fields)
}

func (_c *userRepositoryGetUserCall) OnGetUsersRaw(filter interface{}) *userRepositoryGetUsersCall {
	return _c.Parent.OnGetUsersRaw(filter)
}

func (_m *userRepositoryMock) GetUserFromFields(_ context.Context, gameId string, fields database.UserFields) (*database.User, error) {
	_ret := _m.Called(gameId, fields)

	if _rf, ok := _ret.Get(0).(func(string, database.UserFields) (*database.User, error)); ok {
		return _rf(gameId, fields)
	}

	_ra0, _ := _ret.Get(0).(*database.User)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *userRepositoryMock) OnGetUserFromFields(gameId string, fields database.UserFields) *userRepositoryGetUserFromFieldsCall {
	return &userRepositoryGetUserFromFieldsCall{Call: _m.Mock.On("GetUserFromFields", gameId, fields), Parent: _m}
}

func (_m *userRepositoryMock) OnGetUserFromFieldsRaw(gameId interface{}, fields interface{}) *userRepositoryGetUserFromFieldsCall {
	return &userRepositoryGetUserFromFieldsCall{Call: _m.Mock.On("GetUserFromFields", gameId, fields), Parent: _m}
}

type userRepositoryGetUserFromFieldsCall struct {
	*mock.Call
	Parent *userRepositoryMock
}

func (_c *userRepositoryGetUserFromFieldsCall) Panic(msg string) *userRepositoryGetUserFromFieldsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *userRepositoryGetUserFromFieldsCall) Once() *userRepositoryGetUserFromFieldsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *userRepositoryGetUserFromFieldsCall) Twice() *userRepositoryGetUserFromFieldsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *userRepositoryGetUserFromFieldsCall) Times(i int) *userRepositoryGetUserFromFieldsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *userRepositoryGetUserFromFieldsCall) WaitUntil(w <-chan time.Time) *userRepositoryGetUserFromFieldsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *userRepositoryGetUserFromFieldsCall) After(d time.Duration) *userRepositoryGetUserFromFieldsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *userRepositoryGetUserFromFieldsCall) Run(fn func(args mock.Arguments)) *userRepositoryGetUserFromFieldsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *userRepositoryGetUserFromFieldsCall) Maybe() *userRepositoryGetUserFromFieldsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *userRepositoryGetUserFromFieldsCall) TypedReturns(a *database.User, b error) *userRepositoryGetUserFromFieldsCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *userRepositoryGetUserFromFieldsCall) ReturnsFn(fn func(string, database.UserFields) (*database.User, error)) *userRepositoryGetUserFromFieldsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *userRepositoryGetUserFromFieldsCall) TypedRun(fn func(string, database.UserFields)) *userRepositoryGetUserFromFieldsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_gameId := args.String(0)
		_fields, _ := args.Get(1).(database.UserFields)
		fn(_gameId, _fields)
	})
	return _c
}

func (_c *userRepositoryGetUserFromFieldsCall) OnCreateUser(user database.CreateUser) *userRepositoryCreateUserCall {
	return _c.Parent.OnCreateUser(user)
}

func (_c *userRepositoryGetUserFromFieldsCall) OnGetUser(userId string) *userRepositoryGetUserCall {
	return _c.Parent.OnGetUser(userId)
}

func (_c *userRepositoryGetUserFromFieldsCall) OnGetUserFromFields(gameId string, fields database.UserFields) *userRepositoryGetUserFromFieldsCall {
	return _c.Parent.OnGetUserFromFields(gameId, fields)
}

func (_c *userRepositoryGetUserFromFieldsCall) OnGetUsers(filter database.GetUsersFilter) *userRepositoryGetUsersCall {
	return _c.Parent.OnGetUsers(filter)
}

func (_c *userRepositoryGetUserFromFieldsCall) OnCreateUserRaw(user interface{}) *userRepositoryCreateUserCall {
	return _c.Parent.OnCreateUserRaw(user)
}

func (_c *userRepositoryGetUserFromFieldsCall) OnGetUserRaw(userId interface{}) *userRepositoryGetUserCall {
	return _c.Parent.OnGetUserRaw(userId)
}

func (_c *userRepositoryGetUserFromFieldsCall) OnGetUserFromFieldsRaw(gameId interface{}, fields interface{}) *userRepositoryGetUserFromFieldsCall {
	return _c.Parent.OnGetUserFromFieldsRaw(gameId, fields)
}

func (_c *userRepositoryGetUserFromFieldsCall) OnGetUsersRaw(filter interface{}) *userRepositoryGetUsersCall {
	return _c.Parent.OnGetUsersRaw(filter)
}

func (_m *userRepositoryMock) GetUsers(_ context.Context, filter database.GetUsersFilter) ([]database.User, error) {
	_ret := _m.Called(filter)

	if _rf, ok := _ret.Get(0).(func(database.GetUsersFilter) ([]database.User, error)); ok {
		return _rf(filter)
	}

	_ra0, _ := _ret.Get(0).([]database.User)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *userRepositoryMock) OnGetUsers(filter database.GetUsersFilter) *userRepositoryGetUsersCall {
	return &userRepositoryGetUsersCall{Call: _m.Mock.On("GetUsers", filter), Parent: _m}
}

func (_m *userRepositoryMock) OnGetUsersRaw(filter interface{}) *userRepositoryGetUsersCall {
	return &userRepositoryGetUsersCall{Call: _m.Mock.On("GetUsers", filter), Parent: _m}
}

type userRepositoryGetUsersCall struct {
	*mock.Call
	Parent *userRepositoryMock
}

func (_c *userRepositoryGetUsersCall) Panic(msg string) *userRepositoryGetUsersCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *userRepositoryGetUsersCall) Once() *userRepositoryGetUsersCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *userRepositoryGetUsersCall) Twice() *userRepositoryGetUsersCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *userRepositoryGetUsersCall) Times(i int) *userRepositoryGetUsersCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *userRepositoryGetUsersCall) WaitUntil(w <-chan time.Time) *userRepositoryGetUsersCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *userRepositoryGetUsersCall) After(d time.Duration) *userRepositoryGetUsersCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *userRepositoryGetUsersCall) Run(fn func(args mock.Arguments)) *userRepositoryGetUsersCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *userRepositoryGetUsersCall) Maybe() *userRepositoryGetUsersCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *userRepositoryGetUsersCall) TypedReturns(a []database.User, b error) *userRepositoryGetUsersCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *userRepositoryGetUsersCall) ReturnsFn(fn func(database.GetUsersFilter) ([]database.User, error)) *userRepositoryGetUsersCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *userRepositoryGetUsersCall) TypedRun(fn func(database.GetUsersFilter)) *userRepositoryGetUsersCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_filter, _ := args.Get(0).(database.GetUsersFilter)
		fn(_filter)
	})
	return _c
}

func (_c *userRepositoryGetUsersCall) OnCreateUser(user database.CreateUser) *userRepositoryCreateUserCall {
	return _c.Parent.OnCreateUser(user)
}

func (_c *userRepositoryGetUsersCall) OnGetUser(userId string) *userRepositoryGetUserCall {
	return _c.Parent.OnGetUser(userId)
}

func (_c *userRepositoryGetUsersCall) OnGetUserFromFields(gameId string, fields database.UserFields) *userRepositoryGetUserFromFieldsCall {
	return _c.Parent.OnGetUserFromFields(gameId, fields)
}

func (_c *userRepositoryGetUsersCall) OnGetUsers(filter database.GetUsersFilter) *userRepositoryGetUsersCall {
	return _c.Parent.OnGetUsers(filter)
}

func (_c *userRepositoryGetUsersCall) OnCreateUserRaw(user interface{}) *userRepositoryCreateUserCall {
	return _c.Parent.OnCreateUserRaw(user)
}

func (_c *userRepositoryGetUsersCall) OnGetUserRaw(userId interface{}) *userRepositoryGetUserCall {
	return _c.Parent.OnGetUserRaw(userId)
}

func (_c *userRepositoryGetUsersCall) OnGetUserFromFieldsRaw(gameId interface{}, fields interface{}) *userRepositoryGetUserFromFieldsCall {
	return _c.Parent.OnGetUserFromFieldsRaw(gameId, fields)
}

func (_c *userRepositoryGetUsersCall) OnGetUsersRaw(filter interface{}) *userRepositoryGetUsersCall {
	return _c.Parent.OnGetUsersRaw(filter)
}

// wonPrizeRepositoryMock mock of WonPrizeRepository.
type wonPrizeRepositoryMock struct{ mock.Mock }

// NewWonPrizeRepositoryMock creates a new wonPrizeRepositoryMock.
func NewWonPrizeRepositoryMock(tb testing.TB) *wonPrizeRepositoryMock {
	tb.Helper()

	m := &wonPrizeRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *wonPrizeRepositoryMock) CreateWonPrize(_ context.Context, wonPrize database.CreateWonPrize) error {
	_ret := _m.Called(wonPrize)

	if _rf, ok := _ret.Get(0).(func(database.CreateWonPrize) error); ok {
		return _rf(wonPrize)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *wonPrizeRepositoryMock) OnCreateWonPrize(wonPrize database.CreateWonPrize) *wonPrizeRepositoryCreateWonPrizeCall {
	return &wonPrizeRepositoryCreateWonPrizeCall{Call: _m.Mock.On("CreateWonPrize", wonPrize), Parent: _m}
}

func (_m *wonPrizeRepositoryMock) OnCreateWonPrizeRaw(wonPrize interface{}) *wonPrizeRepositoryCreateWonPrizeCall {
	return &wonPrizeRepositoryCreateWonPrizeCall{Call: _m.Mock.On("CreateWonPrize", wonPrize), Parent: _m}
}

type wonPrizeRepositoryCreateWonPrizeCall struct {
	*mock.Call
	Parent *wonPrizeRepositoryMock
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) Panic(msg string) *wonPrizeRepositoryCreateWonPrizeCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) Once() *wonPrizeRepositoryCreateWonPrizeCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) Twice() *wonPrizeRepositoryCreateWonPrizeCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) Times(i int) *wonPrizeRepositoryCreateWonPrizeCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) WaitUntil(w <-chan time.Time) *wonPrizeRepositoryCreateWonPrizeCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) After(d time.Duration) *wonPrizeRepositoryCreateWonPrizeCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) Run(fn func(args mock.Arguments)) *wonPrizeRepositoryCreateWonPrizeCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) Maybe() *wonPrizeRepositoryCreateWonPrizeCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) TypedReturns(a error) *wonPrizeRepositoryCreateWonPrizeCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) ReturnsFn(fn func(database.CreateWonPrize) error) *wonPrizeRepositoryCreateWonPrizeCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) TypedRun(fn func(database.CreateWonPrize)) *wonPrizeRepositoryCreateWonPrizeCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_wonPrize, _ := args.Get(0).(database.CreateWonPrize)
		fn(_wonPrize)
	})
	return _c
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) OnCreateWonPrize(wonPrize database.CreateWonPrize) *wonPrizeRepositoryCreateWonPrizeCall {
	return _c.Parent.OnCreateWonPrize(wonPrize)
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) OnGetWonPrizes(filter database.GetWonPrizesFilter) *wonPrizeRepositoryGetWonPrizesCall {
	return _c.Parent.OnGetWonPrizes(filter)
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) OnCreateWonPrizeRaw(wonPrize interface{}) *wonPrizeRepositoryCreateWonPrizeCall {
	return _c.Parent.OnCreateWonPrizeRaw(wonPrize)
}

func (_c *wonPrizeRepositoryCreateWonPrizeCall) OnGetWonPrizesRaw(filter interface{}) *wonPrizeRepositoryGetWonPrizesCall {
	return _c.Parent.OnGetWonPrizesRaw(filter)
}

func (_m *wonPrizeRepositoryMock) GetWonPrizes(_ context.Context, filter database.GetWonPrizesFilter) ([]database.WonPrize, error) {
	_ret := _m.Called(filter)

	if _rf, ok := _ret.Get(0).(func(database.GetWonPrizesFilter) ([]database.WonPrize, error)); ok {
		return _rf(filter)
	}

	_ra0, _ := _ret.Get(0).([]database.WonPrize)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *wonPrizeRepositoryMock) OnGetWonPrizes(filter database.GetWonPrizesFilter) *wonPrizeRepositoryGetWonPrizesCall {
	return &wonPrizeRepositoryGetWonPrizesCall{Call: _m.Mock.On("GetWonPrizes", filter), Parent: _m}
}

func (_m *wonPrizeRepositoryMock) OnGetWonPrizesRaw(filter interface{}) *wonPrizeRepositoryGetWonPrizesCall {
	return &wonPrizeRepositoryGetWonPrizesCall{Call: _m.Mock.On("GetWonPrizes", filter), Parent: _m}
}

type wonPrizeRepositoryGetWonPrizesCall struct {
	*mock.Call
	Parent *wonPrizeRepositoryMock
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) Panic(msg string) *wonPrizeRepositoryGetWonPrizesCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) Once() *wonPrizeRepositoryGetWonPrizesCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) Twice() *wonPrizeRepositoryGetWonPrizesCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) Times(i int) *wonPrizeRepositoryGetWonPrizesCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) WaitUntil(w <-chan time.Time) *wonPrizeRepositoryGetWonPrizesCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) After(d time.Duration) *wonPrizeRepositoryGetWonPrizesCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) Run(fn func(args mock.Arguments)) *wonPrizeRepositoryGetWonPrizesCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) Maybe() *wonPrizeRepositoryGetWonPrizesCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) TypedReturns(a []database.WonPrize, b error) *wonPrizeRepositoryGetWonPrizesCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) ReturnsFn(fn func(database.GetWonPrizesFilter) ([]database.WonPrize, error)) *wonPrizeRepositoryGetWonPrizesCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) TypedRun(fn func(database.GetWonPrizesFilter)) *wonPrizeRepositoryGetWonPrizesCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_filter, _ := args.Get(0).(database.GetWonPrizesFilter)
		fn(_filter)
	})
	return _c
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) OnCreateWonPrize(wonPrize database.CreateWonPrize) *wonPrizeRepositoryCreateWonPrizeCall {
	return _c.Parent.OnCreateWonPrize(wonPrize)
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) OnGetWonPrizes(filter database.GetWonPrizesFilter) *wonPrizeRepositoryGetWonPrizesCall {
	return _c.Parent.OnGetWonPrizes(filter)
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) OnCreateWonPrizeRaw(wonPrize interface{}) *wonPrizeRepositoryCreateWonPrizeCall {
	return _c.Parent.OnCreateWonPrizeRaw(wonPrize)
}

func (_c *wonPrizeRepositoryGetWonPrizesCall) OnGetWonPrizesRaw(filter interface{}) *wonPrizeRepositoryGetWonPrizesCall {
	return _c.Parent.OnGetWonPrizesRaw(filter)
}
