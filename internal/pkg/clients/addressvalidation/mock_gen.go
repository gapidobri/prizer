// Code generated by mocktail; DO NOT EDIT.

package addressvalidation

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// clientMock mock of Client.
type clientMock struct{ mock.Mock }

// NewClientMock creates a new clientMock.
func NewClientMock(tb testing.TB) *clientMock {
	tb.Helper()

	m := &clientMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *clientMock) NormalizeAddress(_ context.Context, address string) (string, error) {
	_ret := _m.Called(address)

	if _rf, ok := _ret.Get(0).(func(string) (string, error)); ok {
		return _rf(address)
	}

	_ra0 := _ret.String(0)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *clientMock) OnNormalizeAddress(address string) *clientNormalizeAddressCall {
	return &clientNormalizeAddressCall{Call: _m.Mock.On("NormalizeAddress", address), Parent: _m}
}

func (_m *clientMock) OnNormalizeAddressRaw(address interface{}) *clientNormalizeAddressCall {
	return &clientNormalizeAddressCall{Call: _m.Mock.On("NormalizeAddress", address), Parent: _m}
}

type clientNormalizeAddressCall struct {
	*mock.Call
	Parent *clientMock
}

func (_c *clientNormalizeAddressCall) Panic(msg string) *clientNormalizeAddressCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *clientNormalizeAddressCall) Once() *clientNormalizeAddressCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *clientNormalizeAddressCall) Twice() *clientNormalizeAddressCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *clientNormalizeAddressCall) Times(i int) *clientNormalizeAddressCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *clientNormalizeAddressCall) WaitUntil(w <-chan time.Time) *clientNormalizeAddressCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *clientNormalizeAddressCall) After(d time.Duration) *clientNormalizeAddressCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *clientNormalizeAddressCall) Run(fn func(args mock.Arguments)) *clientNormalizeAddressCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *clientNormalizeAddressCall) Maybe() *clientNormalizeAddressCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *clientNormalizeAddressCall) TypedReturns(a string, b error) *clientNormalizeAddressCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *clientNormalizeAddressCall) ReturnsFn(fn func(string) (string, error)) *clientNormalizeAddressCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *clientNormalizeAddressCall) TypedRun(fn func(string)) *clientNormalizeAddressCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_address := args.String(0)
		fn(_address)
	})
	return _c
}

func (_c *clientNormalizeAddressCall) OnNormalizeAddress(address string) *clientNormalizeAddressCall {
	return _c.Parent.OnNormalizeAddress(address)
}

func (_c *clientNormalizeAddressCall) OnNormalizeAddressRaw(address interface{}) *clientNormalizeAddressCall {
	return _c.Parent.OnNormalizeAddressRaw(address)
}
