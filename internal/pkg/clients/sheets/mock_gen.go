// Code generated by mocktail; DO NOT EDIT.

package sheets

import (
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// clientMock mock of Client.
type clientMock struct{ mock.Mock }

// NewClientMock creates a new clientMock.
func NewClientMock(tb testing.TB) *clientMock {
	tb.Helper()

	m := &clientMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *clientMock) AppendRow(sheetId string, tabName string, values []any) error {
	_ret := _m.Called(sheetId, tabName, values)

	if _rf, ok := _ret.Get(0).(func(string, string, []any) error); ok {
		return _rf(sheetId, tabName, values)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *clientMock) OnAppendRow(sheetId string, tabName string, values []any) *clientAppendRowCall {
	return &clientAppendRowCall{Call: _m.Mock.On("AppendRow", sheetId, tabName, values), Parent: _m}
}

func (_m *clientMock) OnAppendRowRaw(sheetId interface{}, tabName interface{}, values interface{}) *clientAppendRowCall {
	return &clientAppendRowCall{Call: _m.Mock.On("AppendRow", sheetId, tabName, values), Parent: _m}
}

type clientAppendRowCall struct {
	*mock.Call
	Parent *clientMock
}

func (_c *clientAppendRowCall) Panic(msg string) *clientAppendRowCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *clientAppendRowCall) Once() *clientAppendRowCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *clientAppendRowCall) Twice() *clientAppendRowCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *clientAppendRowCall) Times(i int) *clientAppendRowCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *clientAppendRowCall) WaitUntil(w <-chan time.Time) *clientAppendRowCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *clientAppendRowCall) After(d time.Duration) *clientAppendRowCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *clientAppendRowCall) Run(fn func(args mock.Arguments)) *clientAppendRowCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *clientAppendRowCall) Maybe() *clientAppendRowCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *clientAppendRowCall) TypedReturns(a error) *clientAppendRowCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *clientAppendRowCall) ReturnsFn(fn func(string, string, []any) error) *clientAppendRowCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *clientAppendRowCall) TypedRun(fn func(string, string, []any)) *clientAppendRowCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_sheetId := args.String(0)
		_tabName := args.String(1)
		_values, _ := args.Get(2).([]any)
		fn(_sheetId, _tabName, _values)
	})
	return _c
}

func (_c *clientAppendRowCall) OnAppendRow(sheetId string, tabName string, values []any) *clientAppendRowCall {
	return _c.Parent.OnAppendRow(sheetId, tabName, values)
}

func (_c *clientAppendRowCall) OnAppendRowRaw(sheetId interface{}, tabName interface{}, values interface{}) *clientAppendRowCall {
	return _c.Parent.OnAppendRowRaw(sheetId, tabName, values)
}
