// Code generated by mocktail; DO NOT EDIT.

package mandrill

import (
	"testing"
	"time"

	"github.com/mattbaird/gochimp"
	"github.com/stretchr/testify/mock"
)

// clientMock mock of Client.
type clientMock struct{ mock.Mock }

// NewClientMock creates a new clientMock.
func NewClientMock(tb testing.TB) *clientMock {
	tb.Helper()

	m := &clientMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *clientMock) SendTemplate(templateName string, message gochimp.Message) error {
	_ret := _m.Called(templateName, message)

	if _rf, ok := _ret.Get(0).(func(string, gochimp.Message) error); ok {
		return _rf(templateName, message)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *clientMock) OnSendTemplate(templateName string, message gochimp.Message) *clientSendTemplateCall {
	return &clientSendTemplateCall{Call: _m.Mock.On("SendTemplate", templateName, message), Parent: _m}
}

func (_m *clientMock) OnSendTemplateRaw(templateName interface{}, message interface{}) *clientSendTemplateCall {
	return &clientSendTemplateCall{Call: _m.Mock.On("SendTemplate", templateName, message), Parent: _m}
}

type clientSendTemplateCall struct {
	*mock.Call
	Parent *clientMock
}

func (_c *clientSendTemplateCall) Panic(msg string) *clientSendTemplateCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *clientSendTemplateCall) Once() *clientSendTemplateCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *clientSendTemplateCall) Twice() *clientSendTemplateCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *clientSendTemplateCall) Times(i int) *clientSendTemplateCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *clientSendTemplateCall) WaitUntil(w <-chan time.Time) *clientSendTemplateCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *clientSendTemplateCall) After(d time.Duration) *clientSendTemplateCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *clientSendTemplateCall) Run(fn func(args mock.Arguments)) *clientSendTemplateCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *clientSendTemplateCall) Maybe() *clientSendTemplateCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *clientSendTemplateCall) TypedReturns(a error) *clientSendTemplateCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *clientSendTemplateCall) ReturnsFn(fn func(string, gochimp.Message) error) *clientSendTemplateCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *clientSendTemplateCall) TypedRun(fn func(string, gochimp.Message)) *clientSendTemplateCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_templateName := args.String(0)
		_message, _ := args.Get(1).(gochimp.Message)
		fn(_templateName, _message)
	})
	return _c
}

func (_c *clientSendTemplateCall) OnSendTemplate(templateName string, message gochimp.Message) *clientSendTemplateCall {
	return _c.Parent.OnSendTemplate(templateName, message)
}

func (_c *clientSendTemplateCall) OnSendTemplateRaw(templateName interface{}, message interface{}) *clientSendTemplateCall {
	return _c.Parent.OnSendTemplateRaw(templateName, message)
}
